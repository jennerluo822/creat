//以下是污染实例

//初始化命名空间
global.o2c = function (){return '这是 GLOBAL污染的主函数';};

//log
global.o2c.log = console.log;

//time/timeEnd
global.o2c.time = console.time;
global.o2c.timeEnd = console.timeEnd;

//isObj
global.o2c.isObj = function (o) {return 'object' === type(o);};

//isFn
global.o2c.isFn = function (fn) {return 'function' === type(fn);};

//isString
global.o2c.isString = function (s) {return 'string' === type(s)};

//isArray
global.o2c.isArray = function (a) {return 'array' === type(a)};

//error
global.o2c.error = function(info){o2c.log(info);process.exit(0);}

//此函数公用库
function type(obj) {
	var o = {};
	return o.toString.call(obj).replace(/\[object (\w+)\]/, '$1').toLowerCase();
}

//point
global.o2c.point = function(next,cc){
	//检测next的合法性
	if(!o2c.isString(next)){o2c.error('指针所指向的函数名，不为string类型')};
	if(!o2c.point[next]){o2c.error('指针所指向的函数'+next+'未注册')};
	//检测第二传参的合法性
	if(cc){
		if(!o2c.isArray(cc)){o2c.error(next+'的第二传参必须为数组')}	
	}
	o2c.point[next].apply(o2c.point[next],cc);
}

global.o2c.runtime = function(next,cc){
	//检测next的合法性
	if(!o2c.isString(next)){o2c.error('指针所指向的函数名，不为string类型')};
	if(!o2c.runtime[next]){o2c.error('指针所指向的函数'+next+'未注册')};
	//检测第二传参的合法性
	if(cc){
		if(!o2c.isArray(cc)){o2c.error(next+'的第二传参必须为数组')}	
	}
	o2c.runtime[next].apply(o2c.runtime[next],cc);
}

global.o2c.confdir = function(path){
   o2c.confdir.k = path;
}
