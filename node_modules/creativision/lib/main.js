require('./loop');
require('./router');
var http = require('http');
var cluster = require('cluster')
var numCPUs = require('os').cpus().length;
var creat = exports = module.exports = {};

creat.init = function(){
  this.settings = {};
  //执行默认配置
  this.config();
};

creat.config = function(){
  //默认端口
  this.set('port','80');
  //默认核心数
  this.set('core','m');
}

creat.set = function(setting, val){
  if (1 == arguments.length) {
    return this.settings[setting];
  } else {
    this.settings[setting] = val;
    return this;
  }
};

creat.get = function(val){
  return this.set(val);
}

creat.listen = function(){
  var server = http.createServer(this);
  return server.listen.apply(server, arguments);
};

creat.mlisten = function(){
  if(cluster.isMaster){
    o2c.log("宿主启动...");
	for (var i = 0; i < numCPUs; i++) {
	  cluster.fork();
	}
	cluster.on('listening',function(worker,address){
	  o2c.log('核心 '+i+' 启动 pid:'+ worker.process.pid);
	});
	cluster.on('exit', function(worker, code, signal) {
	  o2c.log('核心'+i+' pid:'+ worker.process.pid+' 重启')
	  //防止无限重启耗尽资源
	  setTimeout(function() {cluster.fork();},2000);
	});
  }else{
  	//这里的全局作用域必须是this
    this.listen.apply(this,arguments);
  }
};

creat.start = function(port){
  if(this.get('core')=='s'){this.listen(port)};
  if(this.get('core')=='m'){this.mlisten(port)};
}

//访问时执行的函数
//核心控制器->loop.js
creat.loop = function(req,res){
  o2c.runtime('loop',[req,res]);
}